name: Golang Build

on:
  release:
    types: [published]

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: version
        run: |
          if [ -f go.mod ]; then
            version=$(grep '^go [0-9]' go.mod | awk '{print $2}')
            echo "version=$version" >> "$GITHUB_OUTPUT"
          else
            echo "Erreur : le fichier go.mod est introuvable."
            exit 1
          fi

  build:
    runs-on: ubuntu-latest
    needs: version
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ needs.version.outputs.version }}

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p output
          output_name="NodeMonitor-$GOOS-$GOARCH"
          if [ "$GOOS" == "windows" ]; then
            output_name="$output_name.exe"
          fi
          go build -o "output/$output_name" ./...

      - name: Set asset file and name
        id: set_output_file
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          if [ "$GOOS" == "windows" ]; then
            file="./output/NodeMonitor-$GOOS-$GOARCH.exe"
            name="NodeMonitor-$GOOS-$GOARCH.exe"
          else
            file="./output/NodeMonitor-$GOOS-$GOARCH"
            name="NodeMonitor-$GOOS-$GOARCH"
          fi
          if [ -f "$file" ]; then
            echo "file=$file" >> "$GITHUB_OUTPUT"
            echo "name=$name" >> "$GITHUB_OUTPUT"
          else
            echo "Erreur : le fichier $file n'existe pas."
            exit 1
          fi

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.set_output_file.outputs.file }}
          asset_name: ${{ steps.set_output_file.outputs.name }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}