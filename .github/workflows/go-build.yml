name: Golang Build

on:
    release:
        types: [published]

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - id: version
        run: echo version="$(cat go.mod | sed -n 's/^go \(.*\)/\1/p')" >> "$GITHUB_OUTPUT"

  build:
    runs-on: ubuntu-latest
    needs: version
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ needs.version.outputs.version }}

    - name: Build
      run: |
        mkdir -p output
        if [ "${{ matrix.goos }}" == "windows" ]; then
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o output/NodeMonitor-${{ matrix.goos }}-${{ matrix.goarch }}.exe ./...
        else
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o output/NodeMonitor-${{ matrix.goos }}-${{ matrix.goarch }} ./...
        fi

    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: |
          if [ "${{ matrix.goos }}" == "windows" ]; then
            ./output/NodeMonitor-${{ matrix.goos }}-${{ matrix.goarch }}.exe
          else
            ./output/NodeMonitor-${{ matrix.goos }}-${{ matrix.goarch }}
          fi
        asset_name: |
          if [ "${{ matrix.goos }}" == "windows" ]; then
            NodeMonitor-${{ matrix.goos }}-${{ matrix.goarch }}.exe
          else
            NodeMonitor-${{ matrix.goos }}-${{ matrix.goarch }}
          fi
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
